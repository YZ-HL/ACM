#include <bits/stdc++.h>
#define maxn 5000005
#define BLOCK_LENGTH 5000000
#define int long long
using namespace std;
int BLOCK[] = {11528251, 11746355, 11875071, 11960486, 12025947, 12077488, 12124874, 12162364, 12194573, 12225757, 12247870, 12275588, 12295179, 12315907, 12333549, 12353427, 12369940, 12387579, 12401593, 12415306, 12428160, 12441645, 12452999, 12463548, 12474851, 12484168, 12493268, 12502639, 12512265, 12520938, 12529814, 12540221, 12548015, 12556536, 12563765, 12570535, 12577188, 12585200, 12592066, 12597064, 12602315, 12609274, 12615786, 12622892, 12628306, 12633867, 12640464, 12645949, 12651743, 12657768, 12662211, 12667490, 12672095, 12676085, 12680612, 12685147, 12688691, 12693999, 12697808, 12701589, 12706459, 12711306, 12714989, 12718386, 12722803, 12727230, 12731628, 12735731, 12739201, 12741903, 12745108, 12747734, 12750905, 12754008, 12756648, 12762011, 12765346, 12767621, 12771134, 12774721, 12778139, 12781101, 12784608, 12787268, 12789937, 12792391, 12794987, 12798110, 12801216, 12804549, 12806821, 12809469, 12812689, 12815709, 12818209, 12820982, 12823225, 12826901, 12828896, 12831363, 12833870, 12836241, 12838483, 12841338, 12843489, 12845942, 12848747, 12851071, 12853491, 12854949, 12856842, 12859662, 12862190, 12864464, 12866777, 12869452, 12872146, 12873814, 12875466, 12877312, 12879117, 12880971, 12882567, 12884173, 12886394, 12887983, 12890171, 12891585, 12893889, 12895894, 12897447, 12899622, 12901353, 12903092, 12905033, 12906735, 12908653, 12910945, 12912483, 12914324, 12915702, 12917194, 12920017, 12921090, 12923162, 12925063, 12927033, 12927959, 12929634, 12930547, 12931978, 12933610, 12934910, 12936498, 12939033, 12940306, 12941889, 12943665, 12944963, 12946181, 12947414, 12948965, 12950563, 12952827, 12954578, 12956139, 12957532, 12958948, 12960280, 12961636, 12963244, 12964412, 12966081, 12967496, 12968628, 12969973, 12971057, 12971994, 12973384, 12974516, 12975556, 12977296, 12978692, 12980150, 12981159, 12982274, 12983796, 12984595, 12986010, 12987195, 12988833, 12990105, 12991086, 12992149, 12993962, 12995413, 12996695, 12997310, 12998856, 12999886};
int lf, rt, cnt, isp[maxn], sp[maxn]; bool iisp[maxn];
void euler(int lim){
    memset(iisp, true, sizeof(iisp));
    iisp[1] = false;
    for(int i = 2; i <= lim; i++)
    {
        if(iisp[i])    
        {
            cnt++;
            sp[cnt] = i;
        }
        for(int j = 1; j <= cnt && i * sp[j] <= lim ; j++)
        {
            iisp[i * sp[j]] = false;
            if(i % sp[j] == 0)  break;
        }
    }
}
int count(int lf, int rt){
    memset(isp, 0, sizeof(isp));    int num = 0;
    for(int i = 1; sp[i] * sp[i] <= rt && i <= cnt; i++)
    {
        int st = lf / sp[i];
        while(st <= 1 || sp[i] * st < lf)  st++;
        for( ;sp[i] * st <= rt; st++)	
            isp[sp[i] * st - lf] = 1;
    }   
    for(int i = 0; i <= rt - lf; i++)
        if(!isp[i])    num++;
    return num;
}
int calc(int l, int r){
    int ans = 0;
    while(r - l >= BLOCK_LENGTH)    
        ans += BLOCK[cnt++], l = l + BLOCK_LENGTH;
    ans += count(l, r);
    return ans;
}
signed main(void)
{
    euler(50000); 
    int t;
    scanf("%lld", &t);
    while(t--)
    {
        int l, r, ans = 0, cnt = 0;
        scanf("%lld %lld", &l, &r); 
        ans = calc(1, r) - calc(1, l - 1);
        //printf("%d\n", ans);
        printf(1.0 * ans / (r - l + 1) < 1.0 / 3 ? "Yes" : "No");
        putchar('\n');
    }
    return 0;
}